{"version":3,"sources":["Chart.tsx","AverageChart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chart","setting","data","setBrushText","setBrushAverage","setBrushTitle","setBrushCompletion","theme","useTheme","chartRef","useRef","svgRef","tooltip","brushOverlay","useSize","width","brushStartIndex","brushDown","groupHeight","marginLeft","marginTop","tooltipOffset","tooltipHeight","tooltipPadding","y","useMemo","joinSentences","element","concat","sentences","d3","domain","d","range","useEffect","current","attr","select","append","length","style","text","mousemoveTooltip","useCallback","e","i","intervals","_","bisection","offsetX","yOffset","sentence","substr","tooltipCharLimit","html","toFixed","mousedownBrush","mousemoveBrush","offset","mouseupBrush","endPosition","beginning","Math","min","end","max","title","slice","map","join","avg","groupSelection","selectAll","enter","each","group","marginBetween","gradient","palette","primary","main","secondary","remove","yAxis","call","x","line","scaled","datum","on","transition","duration","size","metric","node","SVGGraphicsElement","textHeight","getBBox","height","id","ref","AverageChart","svgHeight","rangeExtend","readingEase","readingGrade","tooltipWidth","averages","mean","push","minAvg","maxAvg","mousemove","xOffset","alignXOffset","yAvg","bandwidth","xAxis","xAxisGroup","barSelection","barGap","useStyles","makeStyles","createStyles","grid","padding","spacing","root","background","default","overflowY","overflowX","flexGrow","paper","position","fontStyle","chart","zIndex","formControl","minWidth","miniChart","paddingBottom","marginBottom","panelTitle","App","classes","useState","setSetting","setData","brushText","brushTitle","brushAverage","brushCompletion","textPromises","file","process","Promise","all","then","fairytales","dataObj","fairytale","byLine","split","sentencesString","splice","match","sentenceObj","rs","fleschReadingEase","fleschKincaidGrade","className","AppBar","Toolbar","Typography","variant","Grid","container","item","xs","sm","Paper","clsx","FormControl","InputLabel","Select","labelId","value","onChange","MenuItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","darkTheme","createMuiTheme","type","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.9dfe3729.chunk.js","sourcesContent":["import React, { useEffect, useRef, useCallback, useMemo } from \"react\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport * as d3 from \"d3\";\nimport useSize from \"@react-hook/size\";\nimport _ from \"lodash\";\nimport { FairytaleData, SentenceData } from \"./App\";\n\ninterface ChartProps {\n  setting: \"readingEase\" | \"readingGrade\";\n  data: FairytaleData[] | null;\n  setBrushText: React.Dispatch<React.SetStateAction<string>>;\n  setBrushTitle: React.Dispatch<React.SetStateAction<string>>;\n  setBrushAverage: React.Dispatch<React.SetStateAction<number>>;\n  setBrushCompletion: React.Dispatch<React.SetStateAction<number>>;\n}\n\nfunction Chart({\n  setting,\n  data,\n  setBrushText,\n  setBrushAverage,\n  setBrushTitle,\n  setBrushCompletion,\n}: ChartProps) {\n  const theme = useTheme();\n  const chartRef = useRef(null);\n  const svgRef = useRef<d3.Selection<\n    SVGSVGElement,\n    unknown,\n    HTMLElement,\n    any\n  > | null>(null);\n  const tooltip = useRef<d3.Selection<\n    SVGGElement,\n    unknown,\n    HTMLElement,\n    any\n  > | null>(null);\n  const brushOverlay = useRef<d3.Selection<\n    SVGPolygonElement,\n    unknown,\n    HTMLElement,\n    any\n  > | null>(null);\n  const [width] = useSize(chartRef);\n  const brushStartIndex = useRef(0);\n  const brushDown = useRef(false);\n\n  // Size constants\n  const groupHeight = 100;\n  const marginBetween = 50;\n  const marginLeft = 50;\n  const marginTop = 100;\n  const xLabelMarginTop = 50;\n  const tooltipOffset = 15;\n  const tooltipHeight = 85;\n  const tooltipWidth = 280;\n  const tooltipOffsetHeight = 15;\n  const tooltipPadding = 10;\n  const tooltipCharLimit = 30;\n  const tooltipLineSpacing = 3;\n\n  // Set up y scale\n  const y = useMemo(() => {\n    if (data) {\n      let joinSentences: Record<string, any>[] = [];\n      for (const element of data) {\n        joinSentences = joinSentences.concat(element.sentences);\n      }\n      return d3\n        .scaleLinear()\n        .domain([\n          d3.min(joinSentences, (d) => d[setting]),\n          d3.max(joinSentences, (d) => d[setting]),\n        ])\n        .range([groupHeight, 0]);\n    }\n  }, [data, setting]);\n\n  // Initialize chart and x labels\n  useEffect(() => {\n    if (data && y) {\n      if (!svgRef.current) {\n        svgRef.current = d3\n          .select(\"#chart-area\")\n          .append(\"svg\")\n          .attr(\"width\", width)\n          .attr(\n            \"height\",\n            marginTop + (groupHeight + marginBetween) * data.length\n          )\n          .style(\"overflow\", \"visible\");\n        svgRef.current\n          .append(\"text\")\n          .attr(\"class\", \"xLabelTextLeft\")\n          .text(\"Beginning of Story\")\n          .attr(\"x\", marginLeft)\n          .attr(\"y\", xLabelMarginTop)\n          .attr(\"fill\", \"white\")\n          .attr(\"font-size\", \"12\");\n        svgRef.current\n          .append(\"text\")\n          .attr(\"class\", \"xLabelTextRight\")\n          .text(\"End of Story\")\n          .attr(\"x\", width)\n          .attr(\"y\", xLabelMarginTop)\n          .attr(\"text-anchor\", \"end\")\n          .attr(\"fill\", \"white\")\n          .attr(\"font-size\", \"12\");\n      } else {\n        svgRef.current.attr(\"width\", width);\n        svgRef.current.select(\".xLabelTextLeft\").attr(\"x\", marginLeft);\n        svgRef.current.select(\".xLabelTextRight\").attr(\"x\", width);\n      }\n    }\n  }, [y, data, width]);\n\n  const mousemoveTooltip = useCallback(\n    (e: MouseEvent, data: FairytaleData, i: number) => {\n      const intervals = _.range(\n        marginLeft,\n        width,\n        (width - marginLeft) / data.sentences.length\n      );\n      const bisection = d3.bisect(intervals, e.offsetX) - 1;\n      if (intervals[bisection] && y && tooltip.current) {\n        const yOffset = y(data.sentences[bisection][setting]);\n        if (yOffset) {\n          tooltip.current.attr(\n            \"transform\",\n            `translate(${intervals[bisection]}, ${\n              marginTop +\n              i * (groupHeight + marginBetween) +\n              yOffset -\n              tooltipHeight / 2\n            })`\n          );\n        }\n        let sentence = data.sentences[bisection].sentence;\n        if (sentence.length > tooltipCharLimit) {\n          sentence = sentence.substr(0, tooltipCharLimit - 3) + \"...\";\n        }\n        tooltip.current\n          .select(\".metric\")\n          .html(\n            \"<tspan font-weight='bold' alignment-baseline='text-before-edge'>\" +\n              setting +\n              \":</tspan> \" +\n              data.sentences[bisection][setting]\n          );\n        tooltip.current\n          .select(\".completion\")\n          .html(\n            \"<tspan font-weight='bold' alignment-baseline='text-before-edge'>completion:</tspan> \" +\n              ((bisection / (data.sentences.length - 1)) * 100).toFixed(2) +\n              \"%\"\n          );\n        tooltip.current.select(\".sentence\").text(sentence);\n      }\n    },\n    [y, setting, width]\n  );\n\n  const mousedownBrush = useCallback(\n    (e: MouseEvent, data: FairytaleData, i: number) => {\n      const intervals = _.range(\n        marginLeft,\n        width,\n        (width - marginLeft) / data.sentences.length\n      );\n      const bisection = d3.bisect(intervals, e.offsetX) - 1;\n      brushStartIndex.current = bisection;\n      brushDown.current = true;\n      if (intervals[bisection] && brushOverlay.current) {\n        brushOverlay.current\n          .attr(\n            \"transform\",\n            `translate(${intervals[bisection]}, ${\n              marginTop + i * (groupHeight + marginBetween)\n            })`\n          )\n          .attr(\"points\", `0,0 0,${groupHeight}`)\n          .style(\"display\", null);\n      }\n    },\n    [width]\n  );\n\n  const mousemoveBrush = useCallback(\n    (e: MouseEvent, data: FairytaleData, i: number) => {\n      if (brushDown.current === true) {\n        const intervals = _.range(\n          marginLeft,\n          width,\n          (width - marginLeft) / data.sentences.length\n        );\n        const bisection = d3.bisect(intervals, e.offsetX) - 1;\n        const endPosition = intervals[bisection];\n        const offset = endPosition - intervals[brushStartIndex.current];\n        if (intervals[bisection] && brushOverlay.current) {\n          brushOverlay.current.attr(\n            \"points\",\n            `0,0 0,${groupHeight} ${offset},${groupHeight} ${offset},0`\n          );\n        }\n      }\n    },\n    [width]\n  );\n\n  const mouseupBrush = useCallback(\n    (e: MouseEvent, data: FairytaleData, i: number) => {\n      const intervals = _.range(\n        marginLeft,\n        width,\n        (width - marginLeft) / data.sentences.length\n      );\n      const bisection = d3.bisect(intervals, e.offsetX) - 1;\n      const endPosition = intervals[bisection];\n      brushDown.current = false;\n      const offset = endPosition - intervals[brushStartIndex.current];\n      if (intervals[bisection] && brushOverlay.current) {\n        brushOverlay.current.attr(\"width\", offset);\n      }\n      const beginning = Math.min(brushStartIndex.current, bisection);\n      const end = Math.max(brushStartIndex.current, bisection) + 1;\n      setBrushTitle(data.title);\n      setBrushText(\n        data.sentences\n          .slice(beginning, end)\n          .map((d) => d.sentence)\n          .join(\"\")\n      );\n      const avg = d3.mean(\n        data.sentences.slice(beginning, end),\n        (d) => d[setting]\n      );\n      setBrushAverage(avg ? +avg.toFixed(2) : 0);\n      setBrushCompletion(((end - beginning) / data.sentences.length) * 100);\n    },\n    [\n      width,\n      setBrushText,\n      setBrushTitle,\n      setBrushAverage,\n      setBrushCompletion,\n      setting,\n    ]\n  );\n\n  useEffect(() => {\n    // Only adjust svg on resize and if data is available\n    if (width !== 0 && data && y && svgRef.current) {\n      const groupSelection = svgRef.current.selectAll(\".group\").data(data);\n      groupSelection.enter().each((element, i) => {\n        if (svgRef.current) {\n          const group = svgRef.current\n            .append(\"g\")\n            .attr(\"class\", \"group\")\n            .attr(\"id\", \"group\" + i);\n          group\n            .append(\"text\")\n            .attr(\"class\", \"title\")\n            .text(\n              element.title +\n                `, avg: ` +\n                d3.mean(element.sentences, (d) => d[setting])?.toFixed(2)\n            )\n            .attr(\"x\", width / 2)\n            .attr(\n              \"y\",\n              i * (groupHeight + marginBetween) + marginTop - marginBetween / 2\n            )\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"fill\", \"white\")\n            .attr(\"font-size\", \"12\")\n            .attr(\"font-weight\", \"bold\");\n          const gradient = group\n            .append(\"linearGradient\")\n            .attr(\"id\", \"gradient\" + i)\n            .attr(\"x1\", 0)\n            .attr(\"x2\", 0)\n            .attr(\"y1\", i * (groupHeight + marginBetween) + marginTop)\n            .attr(\n              \"y2\",\n              i * (groupHeight + marginBetween) + marginTop + groupHeight\n            )\n            .attr(\"gradientUnits\", \"userSpaceOnUse\");\n          gradient\n            .append(\"stop\")\n            .attr(\"class\", \"stop1\")\n            .attr(\"offset\", \"0%\")\n            .attr(\n              \"stop-color\",\n              setting === \"readingEase\"\n                ? theme.palette.primary.main\n                : theme.palette.secondary.main\n            );\n          gradient\n            .append(\"stop\")\n            .attr(\"class\", \"stop2\")\n            .attr(\"offset\", \"100%\")\n            .attr(\n              \"stop-color\",\n              setting === \"readingGrade\"\n                ? theme.palette.primary.main\n                : theme.palette.secondary.main\n            );\n          // Create y axis\n          group.select(\".yAxis\").remove();\n          const yAxis = d3.axisLeft(y);\n          group\n            .append(\"g\")\n            .attr(\"class\", \"yAxis\")\n            .attr(\n              \"transform\",\n              `translate(${marginLeft / 2}, ${\n                i * (groupHeight + marginBetween) + marginTop\n              })`\n            )\n            .call(yAxis);\n\n          // Get x scale\n          const x = d3\n            .scaleLinear()\n            .domain([0, element.sentences.length])\n            .range([marginLeft, width]);\n          // Setup line graph\n          const line = d3\n            .line<SentenceData>()\n            .x((_, i) => {\n              const scaled = x(i);\n              return scaled ? scaled : 0;\n            })\n            .y((d) => {\n              const scaled = y(d[setting]);\n              return (\n                (scaled ? scaled : 0) +\n                i * (groupHeight + marginBetween) +\n                marginTop\n              );\n            });\n          group\n            .datum(element.sentences)\n            .append(\"path\")\n            .attr(\"class\", \"lineChart\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", `url(#gradient${i})`)\n            .attr(\"stroke-width\", \"2\")\n            .attr(\"d\", line);\n          group\n            .append(\"rect\")\n            .attr(\"class\", \"overlay\")\n            .attr(\"width\", width - marginLeft)\n            .attr(\"height\", groupHeight)\n            .attr(\"x\", marginLeft)\n            .attr(\"y\", i * (groupHeight + marginBetween) + marginTop)\n            .attr(\"fill\", \"none\")\n            .style(\"pointer-events\", \"all\")\n            .on(\"mouseover\", () => {\n              if (tooltip.current) {\n                tooltip.current.style(\"display\", null);\n              }\n            })\n            .on(\"mouseout\", () => {\n              if (tooltip.current) {\n                tooltip.current.style(\"display\", \"none\");\n              }\n            })\n            .on(\"mousemove\", (e: any) => {\n              mousemoveTooltip(e, element, i);\n              mousemoveBrush(e, element, i);\n            })\n            .on(\"mousedown\", (e: any) => {\n              mousedownBrush(e, element, i);\n            })\n            .on(\"mouseup\", (e: any) => {\n              mouseupBrush(e, element, i);\n            });\n        }\n      });\n      groupSelection.each((element, i) => {\n        if (svgRef.current) {\n          const group = svgRef.current.select(\"#group\" + i);\n          group\n            .select(\".title\")\n            .attr(\"x\", width / 2)\n            .text(\n              element.title +\n                `, avg: ` +\n                d3.mean(element.sentences, (d) => d[setting])?.toFixed(2)\n            );\n          group\n            .select(\".stop1\")\n            .transition()\n            .duration(1000)\n            .attr(\n              \"stop-color\",\n              setting === \"readingEase\"\n                ? theme.palette.primary.main\n                : theme.palette.secondary.main\n            );\n          group\n            .select(\".stop2\")\n            .transition()\n            .duration(1000)\n            .attr(\n              \"stop-color\",\n              setting === \"readingGrade\"\n                ? theme.palette.primary.main\n                : theme.palette.secondary.main\n            );\n          // Create y axis\n          group.select(\".yAxis\").remove();\n          const yAxis = d3.axisLeft(y);\n          group\n            .append(\"g\")\n            .attr(\"class\", \"yAxis\")\n            .attr(\n              \"transform\",\n              `translate(${marginLeft / 2}, ${\n                i * (groupHeight + marginBetween) + marginTop\n              })`\n            )\n            .call(yAxis);\n          // Get x scale\n          const x = d3\n            .scaleLinear()\n            .domain([0, element.sentences.length])\n            .range([marginLeft, width]);\n          // Setup line graph\n          const line = d3\n            .line<SentenceData>()\n            .x((_, i) => {\n              const scaled = x(i);\n              return scaled ? scaled : 0;\n            })\n            .y((d) => {\n              const scaled = y(d[setting]);\n              return (\n                (scaled ? scaled : 0) +\n                i * (groupHeight + marginBetween) +\n                marginTop\n              );\n            });\n          group\n            .select(\".lineChart\")\n            .datum(element.sentences)\n            .transition()\n            .duration(1000)\n            .attr(\"d\", line);\n          group\n            .select(\".overlay\")\n            .attr(\"width\", width - marginLeft)\n            .on(\"mousemove\", (e: any) => {\n              mousemoveTooltip(e, element, i);\n              mousemoveBrush(e, element, i);\n            })\n            .on(\"mousedown\", (e: any) => {\n              mousedownBrush(e, element, i);\n            })\n            .on(\"mouseup\", (e: any) => {\n              mouseupBrush(e, element, i);\n            });\n        }\n      });\n      if (groupSelection.size() === 0) {\n        brushOverlay.current = svgRef.current\n          .append(\"polygon\")\n          .attr(\"class\", \"brushOverlay\")\n          .style(\"display\", \"none\")\n          .style(\"pointer-events\", \"none\")\n          .attr(\"points\", `0,0 0,${groupHeight}`)\n          .attr(\"fill\", \"white\")\n          .attr(\"fill-opacity\", \"20%\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", \"1\");\n        tooltip.current = svgRef.current\n          .append(\"g\")\n          .style(\"display\", \"none\")\n          .attr(\"class\", \"tooltip\")\n          .style(\"pointer-events\", \"none\");\n        tooltip.current\n          .append(\"polygon\")\n          .attr(\"fill\", \"white\")\n          .attr(\n            \"points\",\n            `0,${tooltipHeight / 2}\n            ${tooltipOffset},${tooltipHeight / 2 - tooltipOffsetHeight / 2}\n            ${tooltipOffset},0\n            ${tooltipWidth},0\n            ${tooltipWidth},${tooltipHeight}\n            ${tooltipOffset},${tooltipHeight}\n            ${tooltipOffset},${tooltipHeight / 2 + tooltipOffsetHeight / 2}`\n          )\n          .attr(\"width\", tooltipWidth)\n          .attr(\"x\", tooltipOffset)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", \"2\");\n        tooltip.current\n          .append(\"text\")\n          .attr(\"class\", \"metric\")\n          .text(\"blah\")\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"text-before-edge\")\n          .attr(\"y\", tooltipPadding)\n          .attr(\"x\", tooltipOffset + tooltipPadding);\n        const metric = tooltip.current.select(\".metric\").node();\n        if (metric && metric instanceof SVGGraphicsElement) {\n          const textHeight = metric.getBBox().height;\n          tooltip.current\n            .append(\"text\")\n            .attr(\"class\", \"completion\")\n            .attr(\"fill\", \"black\")\n            .attr(\"alignment-baseline\", \"text-before-edge\")\n            .attr(\"y\", () => {\n              return textHeight + tooltipLineSpacing + tooltipPadding;\n            })\n            .attr(\"x\", tooltipOffset + tooltipPadding);\n          tooltip.current\n            .append(\"text\")\n            .attr(\"class\", \"sentence\")\n            .attr(\"font-style\", \"italic\")\n            .attr(\"fill\", \"black\")\n            .attr(\"alignment-baseline\", \"text-before-edge\")\n            .attr(\"y\", () => {\n              return 2 * (textHeight + tooltipLineSpacing) + tooltipPadding;\n            })\n            .attr(\"x\", tooltipOffset + tooltipPadding);\n        }\n      }\n    }\n  }, [\n    width,\n    theme,\n    data,\n    y,\n    mousemoveTooltip,\n    mousedownBrush,\n    mouseupBrush,\n    mousemoveBrush,\n    setting,\n  ]);\n  return <div id=\"chart-area\" ref={chartRef}></div>;\n}\n\nexport default Chart;\n","import React, { useEffect, useRef, useMemo, useCallback } from \"react\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport * as d3 from \"d3\";\nimport useSize from \"@react-hook/size\";\nimport { FairytaleData } from \"./App\";\n\ninterface AverageChartProps {\n  setting: \"readingEase\" | \"readingGrade\";\n  data: FairytaleData[] | null;\n  setBrushText: React.Dispatch<React.SetStateAction<string>>;\n  setBrushTitle: React.Dispatch<React.SetStateAction<string>>;\n  setBrushAverage: React.Dispatch<React.SetStateAction<number>>;\n  setBrushCompletion: React.Dispatch<React.SetStateAction<number>>;\n}\n\nfunction AverageChart({\n  setting,\n  data,\n  setBrushText,\n  setBrushTitle,\n  setBrushAverage,\n  setBrushCompletion,\n}: AverageChartProps) {\n  const theme = useTheme();\n  const chartRef = useRef(null);\n  const svgRef = useRef<d3.Selection<\n    SVGSVGElement,\n    unknown,\n    HTMLElement,\n    any\n  > | null>(null);\n  const tooltip = useRef<d3.Selection<\n    SVGGElement,\n    unknown,\n    HTMLElement,\n    any\n  > | null>(null);\n  const [width] = useSize(chartRef);\n\n  // Size constants\n  const svgHeight = 300;\n  const marginLeft = 20;\n  const barGap = 10;\n  const rangeExtend = useMemo(\n    () => ({\n      readingEase: 10,\n      readingGrade: 2,\n    }),\n    []\n  );\n  const tooltipOffset = 15;\n  const tooltipHeight = 40;\n  const tooltipWidth = 170;\n  const tooltipOffsetWidth = 15;\n  const tooltipPadding = 10;\n  const marginBottom = 20;\n\n  // Set up y scale\n  const y = useMemo(() => {\n    if (data) {\n      const averages: number[] = [];\n      for (const element of data) {\n        const mean = d3.mean(element.sentences, (d) => d[setting]);\n        if (mean) {\n          averages.push(mean);\n        }\n      }\n      const minAvg = d3.min(averages);\n      const maxAvg = d3.max(averages);\n      if (minAvg && maxAvg) {\n        return d3\n          .scaleLinear()\n          .domain([\n            minAvg - rangeExtend[setting],\n            maxAvg + rangeExtend[setting],\n          ])\n          .range([svgHeight, 0]);\n      }\n    }\n  }, [data, setting, rangeExtend]);\n\n  // Set up x scale\n  const x = useMemo(() => {\n    if (data) {\n      return d3\n        .scaleBand()\n        .domain(data.map((e) => e.title))\n        .range([marginLeft, width]);\n    }\n  }, [data, width]);\n\n  const mousemove = useCallback(\n    (d: FairytaleData) => {\n      if (x && tooltip.current && y) {\n        const xOffset = x(d.title);\n        if (xOffset) {\n          const alignXOffset = xOffset - tooltipWidth / 2;\n          const yAvg = d3.mean(d.sentences, (d) => d[setting]);\n          if (yAvg) {\n            const yOffset = y(yAvg);\n            if (yOffset) {\n              tooltip.current\n                .attr(\n                  \"transform\",\n                  `translate(${alignXOffset + x.bandwidth() / 2}, ${\n                    svgHeight - yOffset - tooltipHeight - tooltipOffset\n                  })`\n                )\n                .select(\"text\")\n                .html(\n                  \"<tspan font-weight='bold' alignment-baseline='text-before-edge'>\" +\n                    setting +\n                    \":</tspan> \" +\n                    yAvg.toFixed(2)\n                );\n            }\n          }\n        }\n      }\n    },\n    [x, y, setting]\n  );\n\n  useEffect(() => {\n    if (data && y && x) {\n      if (!svgRef.current) {\n        svgRef.current = d3\n          .select(\"#chart-area-2\")\n          .append(\"svg\")\n          .attr(\"width\", width)\n          .attr(\"height\", svgHeight)\n          .style(\"overflow\", \"visible\");\n      } else {\n        svgRef.current.attr(\"width\", width);\n      }\n      // Set up axes\n      svgRef.current.selectAll(\".axis\").remove();\n      const xAxis = d3.axisBottom(x);\n      const yAxis = d3.axisLeft(y);\n      const xAxisGroup = svgRef.current\n        .append(\"g\")\n        .attr(\"class\", \"axis\")\n        .attr(\"transform\", `translate(0,${svgHeight})`);\n      const yAxisGroup = svgRef.current.append(\"g\").attr(\"class\", \"axis\");\n      yAxisGroup.call(yAxis).attr(\"transform\", `translate(${marginLeft},0)`);\n      xAxisGroup.call(xAxis);\n      xAxisGroup\n        .selectAll(\"text\")\n        .style(\"text-anchor\", \"end\")\n        .attr(\"transform\", `translate(0,${marginBottom}) rotate(-20) `);\n    }\n  }, [y, data, width, x]);\n\n  useEffect(() => {\n    // Only adjust svg on resize and if data is available\n    if (width !== 0 && data && y && x && svgRef.current) {\n      // Create bar chart\n\n      const barSelection = svgRef.current.selectAll(\".average\");\n      // ENTER\n      barSelection\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"class\", \"average\")\n        .attr(\"x\", (d) => {\n          const xOffset = x(d.title);\n          return xOffset ? xOffset + barGap / 2 : 0;\n        })\n        .attr(\"y\", (d) => {\n          let yOffset = d3.mean(d.sentences, (d) => d[setting]);\n          if (yOffset) {\n            yOffset = y(yOffset);\n            return yOffset ? svgHeight - yOffset : 0;\n          }\n          return 0;\n        })\n        .attr(\"width\", x.bandwidth() - barGap)\n        .attr(\"height\", (d) => {\n          let mean = d3.mean(d.sentences, (d) => d[setting]);\n          if (mean) {\n            mean = y(mean);\n            return mean ? mean : 0;\n          }\n          return 0;\n        })\n        .attr(\"fill\", theme.palette.primary.main)\n        .on(\"mouseover\", () => {\n          if (tooltip.current) {\n            tooltip.current.style(\"display\", null);\n          }\n        })\n        .on(\"mouseout\", () => {\n          if (tooltip.current) {\n            tooltip.current.style(\"display\", \"none\");\n          }\n        })\n        // Bug in d3-types, d is not number\n        // @ts-ignore\n        .on(\"mousemove\", (_, d: FairytaleData) => {\n          if (tooltip.current) {\n            mousemove(d);\n          }\n        })\n        // Bug in d3-types, d is not number\n        // @ts-ignore\n        .on(\"click\", (_, d: FairytaleData) => {\n          setBrushText(d.sentences.map((d) => d.sentence).join(\"\"));\n          setBrushTitle(d.title);\n          const mean = d3.mean(d.sentences, (d) => d[setting]);\n          setBrushAverage(mean ? +mean.toFixed(2) : 0);\n          setBrushCompletion(100);\n        });\n\n      // UPDATE\n      barSelection\n        .data(data)\n        .attr(\"x\", (d) => {\n          const xOffset = x(d.title);\n          return xOffset ? xOffset + barGap / 2 : 0;\n        })\n        .attr(\"width\", x.bandwidth() - barGap)\n        .on(\"mousemove\", (_, d) => {\n          if (tooltip.current) {\n            // Bug in d3-types, d is not number\n            // @ts-ignore\n            mousemove(d);\n          }\n        })\n        .transition()\n        .duration(1000)\n        .attr(\"y\", (d) => {\n          let yOffset = d3.mean(d.sentences, (d) => d[setting]);\n          if (yOffset) {\n            yOffset = y(yOffset);\n            return yOffset ? svgHeight - yOffset : 0;\n          }\n          return 0;\n        })\n        .attr(\"height\", (d) => {\n          let mean = d3.mean(d.sentences, (d) => d[setting]);\n          if (mean) {\n            mean = y(mean);\n            return mean ? mean : 0;\n          }\n          return 0;\n        })\n        .attr(\"fill\", theme.palette.primary.main);\n\n      svgRef.current.select(\".tooltip\").remove();\n      tooltip.current = svgRef.current\n        .append(\"g\")\n        .style(\"display\", \"none\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"pointer-events\", \"none\");\n      tooltip.current\n        .append(\"polygon\")\n        .attr(\"fill\", \"white\")\n        .attr(\n          \"points\",\n          `0,0\n          ${tooltipWidth},0\n          ${tooltipWidth},${tooltipHeight}\n          ${tooltipWidth / 2 + tooltipOffsetWidth / 2},${tooltipHeight}\n          ${tooltipWidth / 2},${tooltipHeight + tooltipOffset}\n          ${tooltipWidth / 2 - tooltipOffsetWidth / 2},${tooltipHeight}\n          0,${tooltipHeight}`\n        )\n        .attr(\"width\", tooltipWidth)\n        .attr(\"x\", tooltipOffset)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"2\");\n      tooltip.current\n        .append(\"text\")\n        .attr(\"class\", \"metric\")\n        .text(\"blah\")\n        .attr(\"fill\", \"black\")\n        .attr(\"alignment-baseline\", \"text-before-edge\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"y\", tooltipPadding)\n        .attr(\"x\", tooltipWidth / 2);\n    }\n  }, [\n    width,\n    theme,\n    data,\n    y,\n    setting,\n    x,\n    mousemove,\n    setBrushText,\n    setBrushTitle,\n    setBrushAverage,\n    setBrushCompletion,\n  ]);\n  return <div id=\"chart-area-2\" ref={chartRef}></div>;\n}\n\nexport default AverageChart;\n","/// <reference path=\"./types.d.ts\" />\nimport React, { useState, useEffect } from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Chart from \"./Chart\";\nimport AverageChart from \"./AverageChart\";\nimport clsx from \"clsx\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport * as d3 from \"d3\";\nimport rs from \"text-readability\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    grid: {\n      padding: theme.spacing(3, 3, 0),\n    },\n    root: {\n      background: theme.palette.background.default,\n      height: \"100vh\",\n      overflowY: \"scroll\",\n      overflowX: \"hidden\",\n    },\n    title: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(3),\n      position: \"relative\",\n    },\n    metric: {\n      fontStyle: \"italic\",\n    },\n    chart: {\n      zIndex: 1000,\n    },\n    formControl: {\n      minWidth: 300,\n    },\n    miniChart: {\n      paddingBottom: theme.spacing(15),\n      marginBottom: theme.spacing(3),\n    },\n    panelTitle: {\n      marginBottom: theme.spacing(3),\n    },\n  })\n);\n\nexport interface SentenceData {\n  sentence: string;\n  readingEase: number;\n  readingGrade: number;\n}\n\nexport interface FairytaleData {\n  title: string;\n  sentences: SentenceData[];\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [setting, setSetting] = useState<\"readingEase\" | \"readingGrade\">(\n    \"readingEase\"\n  );\n  const [data, setData] = useState<FairytaleData[] | null>(null);\n  const [brushText, setBrushText] = useState(\"\");\n  const [brushTitle, setBrushTitle] = useState(\"\");\n  const [brushAverage, setBrushAverage] = useState(0);\n  const [brushCompletion, setBrushCompletion] = useState(0);\n  const handleChange = () => {\n    setSetting((setting) =>\n      setting === \"readingEase\" ? \"readingGrade\" : \"readingEase\"\n    );\n  };\n\n  useEffect(() => {\n    // Wait for all files to load using promises\n    const textPromises = [];\n    const fileNames = [\n      \"tom-tit-tot.txt\",\n      \"the-three-sillies.txt\",\n      \"the-rose-tree.txt\",\n      \"the-old-woman.txt\",\n      \"jack-fortune.txt\",\n      \"mr-vinegar.txt\",\n    ];\n    for (const file of fileNames) {\n      textPromises.push(\n        d3.text(process.env.PUBLIC_URL + `/englishfairytales/${file}`)\n      );\n    }\n    Promise.all(textPromises).then((fairytales) => {\n      // Loop through each fairytale\n      const dataObj = [];\n      for (let fairytale of fairytales) {\n        // Grab the title\n        const byLine = fairytale.split(\"\\n\");\n        const title = byLine[0];\n        fairytale = byLine.splice(1).join(\"\\n\");\n        // Extract each sentence\n        const sentencesString = fairytale.match(\n          /\\s?([^.!?,:()]|[:,](?!\\s*“|”\\s))+([.!?,:()]|[:,](?=\\s+“|”\\s+))+[\"”]?/g\n        );\n        // Grade each sentence based on Flesch-kincaid scale\n        const sentences: SentenceData[] = [];\n        if (sentencesString) {\n          for (const element of sentencesString) {\n            const sentenceObj: SentenceData = {\n              sentence: element,\n              readingEase: rs.fleschReadingEase(element),\n              readingGrade: rs.fleschKincaidGrade(element),\n            };\n            sentences.push(sentenceObj);\n          }\n        }\n        dataObj.push({\n          title,\n          sentences,\n        });\n      }\n      setData(dataObj);\n    });\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Assignment 3\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container spacing={3} className={classes.grid}>\n        <Grid item xs={12} sm={7}>\n          <Paper className={clsx(classes.paper, classes.chart)}>\n            <FormControl className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={setting}\n                onChange={handleChange}\n              >\n                <MenuItem value={\"readingEase\"}>\n                  Flesch-Kincaid Reading Ease\n                </MenuItem>\n                <MenuItem value={\"readingGrade\"}>\n                  Flesch-Kincaid Grading Level\n                </MenuItem>\n              </Select>\n            </FormControl>\n            <Chart\n              setting={setting}\n              data={data}\n              setBrushText={setBrushText}\n              setBrushAverage={setBrushAverage}\n              setBrushTitle={setBrushTitle}\n              setBrushCompletion={setBrushCompletion}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={5}>\n          <Paper className={clsx(classes.paper, classes.miniChart)}>\n            <Typography variant=\"h6\" className={classes.panelTitle}>\n              Averages{\" \"}\n            </Typography>\n            <AverageChart\n              setting={setting}\n              data={data}\n              setBrushText={setBrushText}\n              setBrushTitle={setBrushTitle}\n              setBrushAverage={setBrushAverage}\n              setBrushCompletion={setBrushCompletion}\n            />\n          </Paper>\n          {brushText && (\n            <Paper className={classes.paper}>\n              <Typography variant=\"h6\">Brush Selection</Typography>\n              <Typography\n                variant=\"body1\"\n                id=\"currentAvg\"\n                className={classes.metric}\n              ></Typography>\n              <Typography variant=\"body1\">\n                <strong>Fairytale:</strong> {brushTitle}\n              </Typography>\n              <Typography variant=\"body1\">\n                <strong>Average:</strong> {brushAverage}\n              </Typography>\n              <Typography variant=\"body1\">\n                <strong>Completion:</strong> {brushCompletion.toFixed(2)}%\n              </Typography>\n              <Typography variant=\"body1\">\n                <em>{brushText}</em>\n              </Typography>\n            </Paper>\n          )}\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={darkTheme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}